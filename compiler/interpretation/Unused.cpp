#include "InterpretationVisitor.h"

void CodeGenerationVisitor::visitProgram_(Program_ *p) {}
void CodeGenerationVisitor::visitDecl(Decl *p) {}
void CodeGenerationVisitor::visitTypeReference(TypeReference *p) {}
void CodeGenerationVisitor::visitFuncDecl(FuncDecl *p) {}
void CodeGenerationVisitor::visitFuncDefn(FuncDefn *p) {}
void CodeGenerationVisitor::visitFuncDomain(FuncDomain *p) {}
void CodeGenerationVisitor::visitFuncRange(FuncRange *p) {}
void CodeGenerationVisitor::visitFuncParam(FuncParam *p) {}
void CodeGenerationVisitor::visitFuncRangeNamed(FuncRangeNamed *p) {}
void CodeGenerationVisitor::visitStatement(Statement *p) {}
void CodeGenerationVisitor::visitStatementIf_(StatementIf_ *p) {}
void CodeGenerationVisitor::visitBody_(Body_ *p) {}
void CodeGenerationVisitor::visitValue(Value *p) {}
void CodeGenerationVisitor::visitExpression(Expression *p) {}
void CodeGenerationVisitor::visitRangeExpr(RangeExpr *p) {}
void CodeGenerationVisitor::visitUnsteppedRangeExpression(UnsteppedRangeExpression *p) {}
void CodeGenerationVisitor::visitRangeBody_(RangeBody_ *p) {}
void CodeGenerationVisitor::visitProgram(Program *p) {}
void CodeGenerationVisitor::visitDeclaration(Declaration *p) {}
void CodeGenerationVisitor::visitUserType(UserType *p) {}
void CodeGenerationVisitor::visitNothingType(NothingType *p) {}
void CodeGenerationVisitor::visitBoolType(BoolType *p) {}
void CodeGenerationVisitor::visitIntegerType(IntegerType *p) {}
void CodeGenerationVisitor::visitDoubleType(DoubleType *p) {}
void CodeGenerationVisitor::visitStringType(StringType *p) {}
void CodeGenerationVisitor::visitFunctionDeclType(FunctionDeclType *p) {}
void CodeGenerationVisitor::visitFunctionDefType(FunctionDefType *p) {}
void CodeGenerationVisitor::visitArrayType(ArrayType *p) {}
void CodeGenerationVisitor::visitFunctionDeclaration(FunctionDeclaration *p) {}
void CodeGenerationVisitor::visitFunctionDefinition(FunctionDefinition *p) {}
void CodeGenerationVisitor::visitFunctionDomain(FunctionDomain *p) {}
void CodeGenerationVisitor::visitFunctionRangeSingle(FunctionRangeSingle *p) {}
void CodeGenerationVisitor::visitFunctionRangeMultiple(FunctionRangeMultiple *p) {}
void CodeGenerationVisitor::visitFunctionParameter(FunctionParameter *p) {}
void CodeGenerationVisitor::visitFunctionRangeSingleNamed(FunctionRangeSingleNamed *p) {}
void CodeGenerationVisitor::visitFunctionRangeMultipleNamed(FunctionRangeMultipleNamed *p) {}
void CodeGenerationVisitor::visitStatementVarDecl(StatementVarDecl *p) {}
void CodeGenerationVisitor::visitStatementVarDef(StatementVarDef *p) {}
void CodeGenerationVisitor::visitStatementVarDefAsc(StatementVarDefAsc *p) {}
void CodeGenerationVisitor::visitStatementAssignment(StatementAssignment *p) {}
void CodeGenerationVisitor::visitStatementIf(StatementIf *p) {}
void CodeGenerationVisitor::visitStatementWhile(StatementWhile *p) {}
void CodeGenerationVisitor::visitStatementFor(StatementFor *p) {}
void CodeGenerationVisitor::visitStatementReturnNone(StatementReturnNone *p) {}
void CodeGenerationVisitor::visitStatementReturnValue(StatementReturnValue *p) {}
void CodeGenerationVisitor::visitIfStatement(IfStatement *p) {}
void CodeGenerationVisitor::visitIfElseIfStatement(IfElseIfStatement *p) {}
void CodeGenerationVisitor::visitIfElseStatement(IfElseStatement *p) {}
void CodeGenerationVisitor::visitBody(Body *p) {}
void CodeGenerationVisitor::visitValueArrowed(ValueArrowed *p) {}
void CodeGenerationVisitor::visitValueBraced(ValueBraced *p) {}
void CodeGenerationVisitor::visitMethodReference(MethodReference *p) {}
void CodeGenerationVisitor::visitRelationalEquals(RelationalEquals *p) {}
void CodeGenerationVisitor::visitRelationalNotEquals(RelationalNotEquals *p) {}
void CodeGenerationVisitor::visitRelationalLess(RelationalLess *p) {}
void CodeGenerationVisitor::visitRelationalGreater(RelationalGreater *p) {}
void CodeGenerationVisitor::visitRelationalLessOrEqual(RelationalLessOrEqual *p) {}
void CodeGenerationVisitor::visitRelationalGreaterOrEqual(RelationalGreaterOrEqual *p) {}
void CodeGenerationVisitor::visitArithmeticSum(ArithmeticSum *p) {}
void CodeGenerationVisitor::visitArithmeticDifference(ArithmeticDifference *p) {}
void CodeGenerationVisitor::visitArithmeticProduct(ArithmeticProduct *p) {}
void CodeGenerationVisitor::visitArithmeticQuotient(ArithmeticQuotient *p) {}
void CodeGenerationVisitor::visitArithmeticModulus(ArithmeticModulus *p) {}
void CodeGenerationVisitor::visitArithmeticExponentiation(ArithmeticExponentiation *p) {}
void CodeGenerationVisitor::visitLogicalUnaryNot(LogicalUnaryNot *p) {}
void CodeGenerationVisitor::visitLogicalConjunction(LogicalConjunction *p) {}
void CodeGenerationVisitor::visitLogicalDisjunction(LogicalDisjunction *p) {}
void CodeGenerationVisitor::visitLogicalExclusiveDisjunction(LogicalExclusiveDisjunction *p) {}
void CodeGenerationVisitor::visitLogicalImplication(LogicalImplication *p) {}
void CodeGenerationVisitor::visitLogicalEquivalence(LogicalEquivalence *p) {}
void CodeGenerationVisitor::visitUnaryHashCode(UnaryHashCode *p) {}
void CodeGenerationVisitor::visitUnaryMinus(UnaryMinus *p) {}
void CodeGenerationVisitor::visitTrueTerm(TrueTerm *p) {}
void CodeGenerationVisitor::visitFalseTerm(FalseTerm *p) {}
void CodeGenerationVisitor::visitEmptyTerm(EmptyTerm *p) {}
void CodeGenerationVisitor::visitStringTerm(StringTerm *p) {}
void CodeGenerationVisitor::visitIntegerTerm(IntegerTerm *p) {}
void CodeGenerationVisitor::visitDoubleTerm(DoubleTerm *p) {}
void CodeGenerationVisitor::visitVariableReferenceTerm(VariableReferenceTerm *p) {}
void CodeGenerationVisitor::visitArrayReferenceTerm(ArrayReferenceTerm *p) {}
void CodeGenerationVisitor::visitFieldReferenceTerm(FieldReferenceTerm *p) {}
void CodeGenerationVisitor::visitFunctionCall(FunctionCall *p) {}
void CodeGenerationVisitor::visitArrayInitializer(ArrayInitializer *p) {}
void CodeGenerationVisitor::visitRangeExpressionTerm(RangeExpressionTerm *p) {}
void CodeGenerationVisitor::visitRangeExpression(RangeExpression *p) {}
void CodeGenerationVisitor::visitSteppedRangeExpression(SteppedRangeExpression *p) {}
void CodeGenerationVisitor::visitOpenRange(OpenRange *p) {}
void CodeGenerationVisitor::visitClosedRange(ClosedRange *p) {}
void CodeGenerationVisitor::visitLeftClosedRightOpenedRange(LeftClosedRightOpenedRange *p) {}
void CodeGenerationVisitor::visitLeftOpenedRightClosedRange(LeftOpenedRightClosedRange *p) {}
void CodeGenerationVisitor::visitRangeBody(RangeBody *p) {}
void CodeGenerationVisitor::visitListDecl(ListDecl *p) {}
void CodeGenerationVisitor::visitListTypeReference(ListTypeReference *p) {}
void CodeGenerationVisitor::visitListFuncParam(ListFuncParam *p) {}
void CodeGenerationVisitor::visitListStatement(ListStatement *p) {}
void CodeGenerationVisitor::visitListExpression(ListExpression *p) {}
void CodeGenerationVisitor::visitInteger(Integer x) {}
void CodeGenerationVisitor::visitChar(Char x) {}
void CodeGenerationVisitor::visitDouble(Double x) {}
void CodeGenerationVisitor::visitString(String x) {}
void CodeGenerationVisitor::visitIdent(Ident x) {}
