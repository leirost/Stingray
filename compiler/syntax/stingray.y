/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.4). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "Bison.H"

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the stingray_lloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <algorithm> /* for std::reverse */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Absyn.H"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE stingray__scan_string(const char *str, yyscan_t scanner);
extern void stingray__delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void stingray_lex_destroy(yyscan_t scanner);
extern char* stingray_get_text(yyscan_t scanner);

extern yyscan_t stingray__initialize_lexer(FILE * inp);

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Exp* exp_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, stingray_get_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _LPAREN    /* ( */
%token          _RPAREN    /* ) */
%token          _STAR      /* * */
%token          _PLUS      /* + */
%token          _SLASH     /* / */
%token<_int>    _INTEGER_

%type <exp_> Exp
%type <exp_> Exp1
%type <exp_> Exp2

%start Exp

%%

Exp : Exp _PLUS Exp1 { $$ = new EAdd($1, $3); result->exp_ = $$; }
  | Exp _PLUS Exp1 { $$ = new ESub($1, $3); result->exp_ = $$; }
  | Exp1 { $$ = $1; result->exp_ = $$; }
;
Exp1 : Exp1 _STAR Exp2 { $$ = new EMul($1, $3); result->exp_ = $$; }
  | Exp1 _SLASH Exp2 { $$ = new EDiv($1, $3); result->exp_ = $$; }
  | Exp2 { $$ = $1; result->exp_ = $$; }
;
Exp2 : _INTEGER_ { $$ = new EInt($1); result->exp_ = $$; }
  | _LPAREN Exp _RPAREN { $$ = $2; result->exp_ = $$; }
;

%%


/* Entrypoint: parse Exp* from file. */
Exp* pExp(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = stingray__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  stingray_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = stingray__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = stingray__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  stingray__delete_buffer(buf, scanner);
  stingray_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from file. */
Exp* pExp1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = stingray__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  stingray_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = stingray__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = stingray__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  stingray__delete_buffer(buf, scanner);
  stingray_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from file. */
Exp* pExp2(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = stingray__initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  stingray_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}

/* Entrypoint: parse Exp* from string. */
Exp* psExp2(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = stingray__initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = stingray__scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  stingray__delete_buffer(buf, scanner);
  stingray_lex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.exp_;
  }
}



